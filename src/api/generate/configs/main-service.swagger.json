{
  "openapi": "3.0.0",
  "components": {
    "examples": {},
    "headers": {},
    "parameters": {},
    "requestBodies": {},
    "responses": {},
    "schemas": {
      "DefaultSelection_Prisma._36_userPayload_": {
        "properties": {
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "created_time": {
            "type": "string",
            "format": "date-time"
          },
          "profile": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "user_key": {
            "type": "string"
          },
          "app_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "required": ["update_time", "created_time", "profile", "name", "user_key", "app_id", "id"],
        "type": "object"
      },
      "user": {
        "$ref": "#/components/schemas/DefaultSelection_Prisma._36_userPayload_",
        "description": "Model user\nThis model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments\nThis model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info."
      },
      "PingResponse": {
        "properties": {
          "message": {
            "type": "string"
          }
        },
        "required": ["message"],
        "type": "object"
      },
      "_36_Enums.massage_type": {
        "type": "string",
        "enum": ["text", "image"]
      },
      "Prisma.JsonValue": {
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "number",
            "format": "double"
          },
          {
            "type": "boolean"
          },
          {
            "$ref": "#/components/schemas/Prisma.JsonObject"
          },
          {
            "$ref": "#/components/schemas/Prisma.JsonArray"
          }
        ],
        "nullable": true,
        "description": "From https://github.com/sindresorhus/type-fest/\nMatches any valid JSON value."
      },
      "Prisma.JsonObject": {
        "properties": {},
        "additionalProperties": {
          "$ref": "#/components/schemas/Prisma.JsonValue"
        },
        "type": "object",
        "description": "From https://github.com/sindresorhus/type-fest/\nMatches a JSON object.\nThis type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from."
      },
      "Prisma.JsonArray": {
        "description": "From https://github.com/sindresorhus/type-fest/\nMatches a JSON array.",
        "properties": {},
        "type": "object",
        "additionalProperties": false
      },
      "DefaultSelection_Prisma._36_messagePayload_": {
        "properties": {
          "update_time": {
            "type": "string",
            "format": "date-time"
          },
          "created_time": {
            "type": "string",
            "format": "date-time"
          },
          "user_read": {
            "$ref": "#/components/schemas/Prisma.JsonValue"
          },
          "message": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/_36_Enums.massage_type"
          },
          "conversation_id": {
            "type": "string"
          },
          "sender_id": {
            "type": "string"
          },
          "id": {
            "type": "string"
          }
        },
        "required": [
          "update_time",
          "created_time",
          "user_read",
          "message",
          "type",
          "conversation_id",
          "sender_id",
          "id"
        ],
        "type": "object"
      },
      "message": {
        "$ref": "#/components/schemas/DefaultSelection_Prisma._36_messagePayload_",
        "description": "Model message\nThis model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments\nThis model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info."
      },
      "MessageByConversationIdResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/message"
          },
          {
            "properties": {
              "user": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/user"
                  }
                ],
                "nullable": true
              }
            },
            "required": ["user"],
            "type": "object"
          }
        ]
      },
      "CreateMessageRequest": {
        "properties": {
          "message": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/_36_Enums.massage_type"
          },
          "sender_id": {
            "type": "string"
          },
          "conversation_id": {
            "type": "string"
          }
        },
        "required": ["message", "type", "sender_id", "conversation_id"],
        "type": "object"
      }
    },
    "securitySchemes": {}
  },
  "info": {
    "title": "node-express-template",
    "version": "1.0.0",
    "description": "API Service Node Express Template",
    "license": {
      "name": "MIT"
    },
    "contact": {}
  },
  "paths": {
    "/user/all": {
      "get": {
        "operationId": "GetAll",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/user"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "tags": ["User"],
        "security": [],
        "parameters": []
      }
    },
    "/user/{id}": {
      "get": {
        "operationId": "GetUser",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/user"
                    }
                  ],
                  "nullable": true
                }
              }
            }
          }
        },
        "tags": ["User"],
        "security": [],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/ping": {
      "get": {
        "operationId": "GetMessage",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PingResponse"
                }
              }
            }
          }
        },
        "tags": ["Ping"],
        "security": [],
        "parameters": []
      }
    },
    "/message/all": {
      "get": {
        "operationId": "GetAll",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/message"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "tags": ["Message"],
        "security": [],
        "parameters": []
      }
    },
    "/message/history/{conversation_id}": {
      "get": {
        "operationId": "GetMessageByConversationId",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/MessageByConversationIdResponse"
                  },
                  "type": "array"
                }
              }
            }
          }
        },
        "tags": ["Message"],
        "security": [],
        "parameters": [
          {
            "in": "path",
            "name": "conversation_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ]
      }
    },
    "/message/create": {
      "post": {
        "operationId": "Create",
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/message"
                }
              }
            }
          }
        },
        "tags": ["Message"],
        "security": [],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateMessageRequest"
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "/"
    }
  ]
}
